from textengines.interfaces import TextEngine


from  hf_channel import HfChannel
from interfaces import element
from RE_5__.REL511 import REL511
from CT import CT


class Pris(element):
    hf_channel: HfChannel
    rel511: REL511
    spec: str | None = None
    ct: CT
    izol: list

    def add_te(self, te: TextEngine):
        super().add_te(te)
        self.hf_channel.add_te(te)
        self.ct.add_te(te)
        self.rel511.add_te(te)

    def get_protocol(self):
        if self.spec:
            self.te.h1('Основные характеристики аппаратуры')
            self.te.include(self.spec)
        self.te.h1('Внешний осмотр панелей, шкафов и другого оборудования')
        self.te.ul('Надёжность крепления панели, шкафа, ящика, аппаратуры.')
        self.te.i('Крепления и аппаратура установлены надежно.')
        self.te.ul('Отсутствие механических повреждений аппаратуры, состояние изоляции выводов реле и другой аппаратуры.')
        self.te.i('Повреждения отсутствуют, состояние изоляции удовлетворительное.')
        self.te.ul('Отсутствие пыли и грязи на кожухах аппаратуры и рядах зажимов.')
        self.te.i('Загрязнения отсутствуют.')
        self.te.ul('Состояние окраски панелей, шкафов, ящиков и др.элементов устройства.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Состояние монтажа проводов и кабелей, надежность контактных соединений на радах зажимов, ответвлениях'
                   ' от шинок, шпильках реле, испытательных блоках, резисторах, а также надежность паек всех элементов.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Состояние концевых разделок кабелей вторичных соединений.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Состояние уплотнений дверок шкафов, кожухов выводов на стороне вторичных цепей трансформаторов тока'
                   ' и напряжения и т.д.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Состояние заземления вторичных цепей.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Состояние электромагнитов управления и блок - контактов разъединителей, выключателей, автоматов'
                   ' и другой коммутационной аппаратуры.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Наличие надписей на панелях, шкафах, ящиках и аппаратуре, наличие маркировки кабелей, жил кабелей'
                   ' и проводов.')
        self.te.i('Надписи в наличии и верны.')
        self.te.h1('Предварительная проверка заданных уставок')
        self.te.i('Предварительная проверка не выявила отклонений.')
        self.te.h1('Внутренний осмотр, чистка и проверка механической части аппаратуры')
        self.te.ul('Проверка состояния уплотнения кожухов и целости стекол.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Проверка состояния деталей и надежности их крепления.')
        self.te.i('Детали в целости, закреплены надежно.')
        self.te.ul('Чистка от пыли.')
        self.te.i('Чистка выполнена.')
        self.te.ul('Проверка надежности контактных соединений и паек.')
        self.te.i('Контактные соединения выполнены надежно.')
        self.te.ul('Проверка затяжки болтов, стягивающих сердечники трансформаторов, дросселей и т.п.')
        self.te.i('Сердечники трансформаторов стянуты надежно.')
        self.te.ul('Проверка состояния изоляции соединительных проводов и обмоток аппаратуры.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Проверка состояния контактных поверхностей.')
        self.te.i('Состояние удовлетворительное.')
        self.te.ul('Проверка и (при необходимости) регулирование механических характеристик аппаратуры.')
        self.te.i('Люфты и зазоры незначительны')
        self.get_electric()
        self.te.h1('Измерение и испытание изоляции')
        self.te.table_name('Измерение изоляцмм')
        self.te.table_head('№ группы', 'Цепь', 'Режим', 'Сопротивление,МОм')
        for n, gr in enumerate(self.izol):
            self.te.table_row(n+1, *gr)


    def get_electric(self):
        self.te.h1('Проверка электрических характеристик')
        self.ct.get_electric()
        self.rel511.get_electric()
        # self.hf_channel.get_electric()

    def get_complex(self):
        ...